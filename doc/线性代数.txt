矩阵的运算
a=np.array([[1,2,3,4],[6,7,8,9]])
b=np.array([[4,3,2,1],[9,8,7,6]])
a
array([[1, 2, 3, 4],
       [6, 7, 8, 9]])
b
array([[4, 3, 2, 1],
       [9, 8, 7, 6]])
b.T
array([[4, 9],
       [3, 8],
       [2, 7],
       [1, 6]])
       
数乘 a*b=
array([[ 4,  6,  6,  4],
       [54, 56, 56, 54]])

点乘/内积 a.dot(b.T)=
array([[ 20,  70],
       [ 70, 220]])
对称矩阵 A=A.T

元素的代数余子式
    在n阶行列式中，把元素aₒₑi所在的第o行和第e列划去后，留下来的n-1阶行列式叫做元素aₒₑi的余子式，记作Mₒₑ，将余子式Mₒₑ再乘以-1的o+e次幂记为Aₒₑ，Aₒₑ叫做元素aₒₑ的代数余子式。
    
方阵的行列式:
    定义:是由排成n阶方阵形式的n²个数aij(i,j=1,2,...,n)确定的一个数，其值为n！项之和
    一般求法:按行(列)展开成n个(n-1)阶的行列式(代数余子式)的和,继续迭代直至n=1
def f(A,i,j):
    if(A.shape==(1,1)):
        return A[0,0]
    C=[[_ for x,_ in enumerate(B) if x!=i] for y,B in enumerate(A) if y!=j]
    C=np.array(C)
    return det(C) if (i+j)%2==0 else -det(C)
def det(A):
    return sum([f(A,i,0) for i,Ai in enumerate(A)])
                    
    性质1 行列互换，行列式不变。
    性质2 把行列式中某一行（列）的所有元素都乘以一个数K，等于用数K乘以行列式。
    性质3 如果行列式的某行(列）的各元素是两个元素之和，那么这个行列式等于两个行列式的和。
    性质4 如果行列式中有两行（列）相同，那么行列式为零。（所谓两行（列）相同就是说两行（列）的对应元素都相等）
    性质5 如果行列式中两行（列）成比例，那么行列式为零。
    性质6 把一行（列）的倍数加到另一行（列），行列式不变。
    性质7 对换行列式中两行（列）的位置，行列式反号。
    
伴随矩阵
    由代数余子式构成的方阵
秩
方阵的逆
    定义对于n阶方阵A，若存在同阶方阵B，使得 AB=BA=E，则称方阵A是可逆的，并称B为A的逆矩阵．A的逆矩阵记作．A
迹


f=lambda j,i:1 if (i+j)%2==0 else -1
g=lambda A,j,i:np.array([[_ for x,_ in enumerate(B) if x!=i] for y,B in enumerate(A) if y!=j])
det=lambda A:A[0,0] if A.shape==(1,1) else sum(np.array([f(0,i)*n*det(g(A,0,i)) for i,n in enumerate(A[0])]))

