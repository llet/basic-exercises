> 多线程:线程的几种状态
runable->running->(sleep,join) runable->running->dead
runnable->running->(synchronized) blocked->runable->running->dead
runable->running->(wait) blocked in wait pool->(notify) blocked in lock pool->runable->running->dead
> 高并发
> jvm:GC/加载机制/内存
什么是java虚拟机
    java虚拟机是一种进程虚拟机,模拟出一套计算机指令集,类似的有Adobe Flash Player,FC模拟器.
    JVM,.NET CLR,P-Code这三个 是高级语言虚拟机,一款虚拟机必须通过Java TCK的测试才能成为java虚拟机
    java虚拟机不一定非要执行java程序,也可以执行其他语言编译后的字节码程序.像groovy等
    业界三大JVM:Oracle HotSpot(jdk中的虚拟机),Oracle JRockit Vm,IBM J9 VM
java内存区域
    方法区     虚拟机栈    本地方法栈
    堆         程序计数器       
    执行引擎   本地库接口  本地方法库    
    
> io
> 网络
> 集合
> 类加载机制
> 性能分析调优
> 分布式:缓存/消息系统/热部署/JMX
> spring
> hibernate
> spring boot
> Junit/log4j2
> shell
> oracle/mysql

JVM 参数 

<JVM6>
    <BASIC OPTIONS>
        Heap                                            -Xms512m -Xmx1024m
        Permanent generation                            -XX:PermSize=128m -XX:MaxPermSize=256m
        Heap free ratio                                 -XX:MinHeapFreeRatio=40 -XX:MaxHeapFreeRatio=70
    <GARBAGE COLLECTION>                            
        <Young generation>                      
        New Ratio                                       -XX:NewRatio=1
        Survivor Ratio                                  -XX:SurvivorRatio=99
        or explicit size of new generation              -XX:NewSize=1m -XX:NewSizeMax=99m
        <Garbage collector>
        aggressive heap                                 -XX:+AggressiveHeap
        G1                                              -XX:+UseG1GC
            <Basic tuning>
            Heap region size                            -XX:G1HeapRegionSize=1
            Initiating heap occupancy percent           -XX:InitiatingHeapOccupancyPercent=1
            Mixed GC live threshold percent             -XX:G1MixedGCLiveThresholdPercent=1
            Heap waste percent                          -XX:G1HeapWastePercent=1
            Old CSetRegion threshold percent            -XX:G1OldCSetRegionThresholdPercent=1
            <Ergonomics hints>
            Maximum garbage collection pause time       -XX:MaxGCPauseMillis=1
            Throughput (gc time ratio)                  -XX:GCTimeRatio=1
            <Experimental settings>
            New size percent                            -XX:G1NewSizePercent=1
            New maximum size percent                    -XX:G1MaxNewSizePercent=1
            Mixed GC count target                       -XX:G1MixedGCCountTarget=1
        ConcurrentMarkSweep (old)                       -XX:+UseConcMarkSweepGC
            Concurrent GC threads                       -XX:ConcGCThreads=1
            Parallel GC threads                         -XX:ParallelGCThreads=1
            Initiating occupancy fraction (%)           -XX:CMSInitiatingOccupancyFraction=1
            checkbox_UseCMSInitiatingOccupancyOnly      -XX:+UseCMSInitiatingOccupancyOnly
            checkbox_CMSClassUnloadingEnabled           -XX:+CMSClassUnloadingEnabled
        Parallel Scavenge (young)                       -XX:+UseParallelGC -XX:-UseParallelOldGC
            Use parallel old                            -XX:+UseParallelOldGC
            Disable adaptive heap sizing                -XX:-UseAdaptiveSizePolicy
            Maximum garbage collection pause time       -XX:MaxGCPauseMillis=1
            Throughput (gc time ratio)                  -XX:GCTimeRatio=1
        Serial Old (MarkSweepCompact)                   -XX:+UseSerialGC
    <Debug>
        <Garbage Collection>
        Basic information at every gc                   -XX:+PrintGC 
        More detailed information at every gc           -XX:+PrintGCDetails 
        GC application stopped time                     -XX:+PrintGCApplicationStoppedTime 
        GC application concurrent time                  -XX:+PrintGCApplicationConcurrentTime 
        Adaptive size policy                            -XX:+PrintAdaptiveSizePolicy 
        Tenuring age information                        -XX:+PrintTenuringDistribution 
        Relative time stamp at the start of gc event    -XX:+PrintGCTimeStamps 
        Calendar date stamp at the start of gc event    -XX:+PrintGCDateStamps
        <GC file output>
        Log GC to file                                  -Xloggc: 1
        Number of files                                 -XX:+UseGCLogFileRotation
        Maximum file size (Mb)                          -XX:GCLogFileSize=1m
        <Heap debug>
        Print heap information at every gc              -XX:+PrintHeapAtGC           
        Dump heap on OutOfMemory error                  -XX:+HeapDumpOnOutOfMemoryError
        File (very recommended)                         -XX:HeapDumpPath=1
        <Print JVM Options>
        Command line options                            -XX:+PrintCommandLineFlags 
        Initial options values                          -XX:+PrintFlagsInitial 
        Final options values                            -XX:+PrintFlagsFinal
        Unlock diagnostics options                      -XX:+UnlockDiagnosticVMOptions

什么是java中的本地方法?

简单地讲，一个Native Method就是一个java调用非java代码的接口。java的多线程的机制实现中，许多与操作系统的交互都用到了本地方法.
怎么实现一个本地方法?
1.(java代码)声明需要加载的库 helloWordLib
2.(java代码)声明一个本地方法 helloWord
3.使用javac命令编译编Java类 HelloWord
4.使用javah -jni HelloWord 生成后缀名为.h的头文件
5.使用其他语言（C、C++）实现helloWord方法
6.将本地方法编写的文件生成动态链接库
7.运行

jconsole怎么连接到websphere服务器?
在was控制台中添加jvm运行参数
-Djava.rmi.server.hostname=10.132.36.123 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=19081 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false
重启服务，jconsole连接10.132.36.123:19081 提示连接拒绝
--失败

On the admin console (Click on Servers -> Server types -> WebSphere application servers -> server1 -> Java and Process Management -> Process definition -> Java Virtual Machine), add the following line into the field of
Generic JVM Argument (note that the first system property is equal to
nothing and no equal sign for the second system property):

-Djavax.management.builder.initial= -Dcom.sun.management.jmxremote

Add or uncomment the following three lines in file /opt/IBM/ WebSphere/AppServer/java/jre/lib/management/management.properties (or / lib/management/management.properties):

com.sun.management.jmxremote.port=3333
com.sun.management.jmxremote.authenticate=false
com.sun.management.jmxremote.ssl=false
com.sun.management.jmxremote.local.only=false

--成功

什么是JFR报告?

JRockit Flight Recorder Java飞行记录器 
JFR报告记录了JVM 所有事件的历史数据，通过这些数据，可以对JVM性能瓶颈进行分析诊断。
JRockit Flight Recorder 有两种模式，固定时长模式和持续模式，在持续模式中，使用环形缓存保存最近的事件。

怎么样开启JFR?

通过命令行开启 JFR 功能后
java -XX:+UnlockCommercialFeatures -XX:+FlightRecorder MyApp
记录 JFR 报告(固定时长)
jcmd 91300 JFR.start duration=60s
查看状态
jcmd 91300 JFR.check //Recording: recording=7 name="Recording 7" duration=1m (running)
生成JFR报告(这里文件名指不包含路径的文件名)
jcmd 91300 JFR.dump recording=7 filename=testxxx.jfr
查看状态
jcmd 91300 JFR.check
停止
jcmd 91300 JFR.stop recording=7 
jcmd 91300 JFR.check //No available recordings.


