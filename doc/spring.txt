>Web发展简史
Model1 JSP+JavaBean的模式，它的核心是Jsp页面，在这个页面中，Jsp页面负责整合页面和JavaBean（业务逻辑），而且渲染页面,持久化代码直接写在Jsp页面里边，使用Jsp直接处理Web浏览器的请求，并使用JavaBean处理业务逻辑。
Model2 Jsp+Servlet+JavaBean的模式，它和Model1不同的是，增加了Servlet，将调用页面数据，调用业务逻辑等工作放到了Servlet中处理，从而减轻了Jsp的工作负担！Model2开发模式将Servlet的概念引入架构体系中，使用它来分配视图层Jsp的显示页面，同时调用模型层的JavaBean来控制业务逻辑。
Model3 MVC三层则是在Model2此基础上，将JavaBean再一次进行分割：业务逻辑、数据持久化，三层如下：
表示层，JSP/Servlet； 
业务逻辑层：业务规则； 
持久化层：主要包装持久化的逻辑 ；

Rod Johnson在2002年编写的《Expert One-to-One J2EE Design and Development》一书，Rod 在本书中对J2EE正统框架臃肿、低效、脱离现实的种种学院派做法提出了质疑，并以此书为指导思想，编写了interface21框架，也就是后来的Spring。
> 以用户管理模块为例，有一个UserDao接口，有一个接口的实现类UserDaoImpl，由于是面向接口编程，因此我们在每次使用UserDao的时候，都要进行实例化一次,当然不仅仅有UserDao需要进行实例化，还有很多需要进行实例化.
可以看出，每一个方法中都需要进行实例化我们需要用到的实现类，存在大量实例化对象的现象，并且他们的生命周期可能就是从方法的调用开始到方法的调用结束为止，加大了GC回收的压力！了解设计模式的可能会想到使用单例模式的方式来解决这个问题，以此来避免大量重复的创建对象,但这样每次处理数据库中的数据都需要同一个对象去处理，处理数据的性能完全得不到保证。

> 什么是ServletContext，和tomcat等web容器的关系时什么？
web容器接收消息后不知道怎么处理，转交给我们编写的Servlet处理，那么web容器怎么和Servlet交流呢？

